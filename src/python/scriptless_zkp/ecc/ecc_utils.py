"""
Support classes and helper functions for working with elliptic curves used in elliptic curve cryptography (ECC).
"""
from __future__ import annotations

import math

from attr import define

from Cryptodome.PublicKey import ECC


@define(slots=True, frozen=True)
class WeierstrassEllipticCurveConfig:
    """
    Configuration context for working with elliptic curves used in elliptic curve cryptography (ECC).
    Support for obtaining a curve's base point (or generator) is provided, as well as frequently needed properties for
    the order of the sub-group generated by this base point, the order of the field the elliptic curve points'
    coordinates are over, and other intrinsic properties of a given elliptic curve.
    """
    curve: str
    """A primary name used to identify the elliptic curve, which may be a commonly-used abbreviated form."""

    order: int
    """The order of the sub-group generated by the common, public base point (generator) of the elliptic curve."""

    modulus: int
    """The order of the field the elliptic curve points' coordinates are over."""

    coeff_a: int
    coeff_b: int
    size_bits: int
    curve_aliases: list[str]

    @property
    def curve_size_bytes(self) -> int:
        return math.ceil(self.size_bits / 8)

    @property
    def base_point(self) -> ECC.EccPoint:
        """
        A common, public base point (generator) of the elliptic curve, which generates a cyclic sub-group with order
        ``self.order``.
        """
        return ECC.construct(curve=self.curve, d=1).pointQ

    def has_curve_name(self, curve_name: str):
        return curve_name in self.curve_aliases

    @classmethod
    def secp256r1(cls) -> WeierstrassEllipticCurveConfig:
        return WeierstrassEllipticCurveConfig(
            curve="P-256",
            order=0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551,
            modulus=0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff,
            coeff_a=0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc,
            coeff_b=0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b,
            size_bits=256,
            curve_aliases=["p256", "NIST P-256", "P-256", "prime256v1", "secp256r1", "nistp256"]
        )

    @classmethod
    def p256(cls) -> WeierstrassEllipticCurveConfig:
        return cls.secp256r1()
